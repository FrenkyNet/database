<?php
/**
 * FuelPHP\Database is an easy flexible PHP 5.3+ Database Abstraction Layer
 *
 * @package    FuelPHP\Database
 * @version    1.0
 * @author     Frank de Jonge
 * @license    MIT License
 * @copyright  2011 - 2012 FuelPHP Development Team
 */

namespace FuelPHP\Database;

use Closure;
use FuelPHP\Database\Schema\Table;

class Schema
{
	/**
	 * @var  FuelPHP\Database\Connection  $connection  connection
	 */
	protected $connection;

	/**
	 * @var  FuelPHP\Database\Compiler\Schema  $compiler  compiler
	 */
	protected $compiler;

	/**
	 * Constructor
	 *
	 * @param  Connection  $connection  connection
	 */
	public function __construct(Connection $connection)
	{
		$this->connection = $connection;
		$this->compiler = $connection->getSchemaCompiler();
	}

	/**
	 * Create a table
	 *
	 * @param   string   $table   table name
	 * @param   Closure  $config  configuration callback
	 */
	public function createTable($table, Closure $config)
	{
		$table = new Table($table);
		$config($table);

		$this->executeCommand(__METHOD__, $table);
	}

	public function alterTable($table, Closure $config)
	{
		$table = new Table($table);
		$config($table);

		$this->executeCommand(__METHOD__, $table);
	}

	public function dropTable($table, $ifExists = false)
	{
		$table = new Table($table);
		$table->ifExists = $ifExists;

		$this->executeCommand(__METHOD__, $table);
	}

	public function renameTable($table, $name)
	{
		$table = new Table($table);
		$table->name = $name;

		$this->executeCommand(__METHOD__, $table);
	}

	public function dropField($table, $field)
	{
		$this->dropFields($table, $field);
	}

	public function dropFields($table, $field)
	{
		$fields = func_get_args();
		$table = new Table(array_shift($fields));
		$table->fields = $fields;

		$this->executeCommand(__METHOD__, $table);
	}

	public function listTables()
	{
		$query = $this->compiler->compileListTables();
		$tables = $this->connection->execute(DB::SELECT, $query, array(), array(
			'asObject' => false,
		));

		return array_map(function($table)
		{
			return reset($table);
		},
		$tables);
	}

	public function listFields($table)
	{
		$query = $this->compiler->compileListFields($table);

		$fields = $this->connection->execute(DB::SELECT, $query, array(), array(
			'asObject' => false,
		));

		$fields = array_map('array_change_key_case', $fields);

		return $this->compiler->normalizeFields($fields);
	}

	public function hasTable($table)
	{
		$tables = $this->listTables($table);

		return in_array($table, $tables);
	}

	protected function executeCommand($command, $schema)
	{
		list($class, $command) = explode('::', $command);
		$method = 'compile'.ucfirst($command);
		$queries = (array) $this->compiler->{$method}($schema);
		$connection = $this->connection;

		foreach ($queries as $query)
		{
			$connection->execute(DB::PLAIN, $query);
		}
	}
}